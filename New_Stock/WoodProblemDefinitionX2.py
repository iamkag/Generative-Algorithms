from json.tool import main
from shapely.geometry import Polygon
import matplotlib.pyplot as plt
import geopandas as gpd
import numpy as np
import time, os
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import shapely
import shapely.ops
from descartes import PolygonPatch

Stock = [
        Polygon([(0.0,0), (0,4), (1,4), (1,2), (3,2), (3,0)]),
        Polygon([(0.0,0), (0,8), (4,4), (4,0)]),
        Polygon([(0.0,0), (0,6), (3,6), (3,0)]),
        Polygon([(0.0,0), (0,4), (4,4), (4,0)]),
        Polygon([(0.0,0), (0,7), (3,7), (3,0)]),
        Polygon([(0.0,0), (0,6), (4,6), (4,0)]),
        Polygon([(0.0,0), (0,8), (8,8), (8,0)]),
        Polygon([(0.0,0), (0,2), (6,2), (6,0)]),

        Polygon([(0.0,0), (0,3), (1,3), (1,5), (1,3), (4,0)]),
        Polygon([(0.0,0), (0,6), (3,3), (5,0)]),
        Polygon([(0.0,0), (0,8), (3,8), (3,0)]),
        Polygon([(0.0,0), (0,7), (5,5), (5,0)]),
        Polygon([(0.0,0), (0,5), (4,6), (6,0)]),
        Polygon([(0.0,0), (0,4), (4,6), (4,0)]),
        Polygon([(0.0,0), (0,9), (9,9), (9,0)]),
        Polygon([(0.0,0), (0,2), (6,2), (6,0)]),
        ]


Order1 = [
        Polygon([(0,0), (0,3.9), (0.95,3.9), (0.95,0)]),
        Polygon([(0,0), (0,2), (1,2), (1,0)]),
        Polygon([(0,0), (0,1.45), (0.95,1.45), (0.95,0)]),
        Polygon([(0,0), (0,0.45), (0.95,0.45), (0.95,0)])
        ]

Order2 = [
        Polygon([(0,0), (0,4.50), (2,4.50), (2,0)]),
        Polygon([(0,0), (0,4.50), (2,4.50), (2,0)]),
        Polygon([(0,0), (0,1.80), (3.80,1.80), (3.80,0)]),
        Polygon([(0,0), (0,2), (3.90,0)]),
        Polygon([(2,1), (1.96592582628907,0.741180954897479), (1.86602540378444,0.500), (1.70710678118655,0.292893218813453), (1.50,0.133974596215561), (1.25881904510252,0.0340741737109317), (1,0), (0.741180954897479,0.0340741737109317), (0.500,0.133974596215561), (0.292893218813453,0.292893218813453), (0.133974596215561,0.500), (0.0340741737109317,0.741180954897479), (0,1), (0.0340741737109317,1.25881904510252), (0.133974596215561,1.50), (0.292893218813453,1.70710678118655), (0.500,1.86602540378444), (0.741180954897479,1.96592582628907), (1,2), (1.25881904510252,1.96592582628907), (1.50,1.86602540378444), (1.70710678118655,1.70710678118655), (1.86602540378444,1.50), (1.96592582628907,1.25881904510252)], holes=[[(1.75,1), (1.72444436971680,1.19411428382689), (1.64951905283833,1.37500000000000), (1.53033008588991,1.53033008588991), (1.37500000000000,1.64951905283833), (1.19411428382689,1.72444436971680), (1,1.75), (0.805885716173109,1.72444436971680), (0.625,1.64951905283833), (0.469669914110089,1.53033008588991), (0.350480947161671,1.37500000000000), (0.275555630283199,1.19411428382689), (0.250,1), (0.275555630283199,0.805885716173109), (0.350480947161671,0.625), (0.469669914110089,0.469669914110089), (0.625,0.350480947161671), (0.805885716173109,0.275555630283199), (1,0.250), (1.19411428382689,0.275555630283199), (1.37500000000000,0.350480947161671), (1.53033008588991,0.469669914110089), (1.64951905283833,0.625), (1.72444436971680,0.805885716173109)]]),
        Polygon([(1.30,0.650), (1.27785178708789,0.481767620683362), (1.21291651245989,0.325), (1.10961940777126,0.190380592228744), (0.975,0.0870834875401148), (0.818232379316639,0.0221482129121056), (0.650,0), (0.481767620683362,0.0221482129121056), (0.325,0.0870834875401148), (0.190380592228744,0.190380592228744), (0.0870834875401148,0.325), (0.0221482129121056,0.481767620683362), (0,0.650), (0.0221482129121056,0.818232379316639), (0.0870834875401148,0.975), (0.190380592228744,1.10961940777126), (0.325,1.21291651245989), (0.481767620683362,1.27785178708789), (0.650,1.30), (0.818232379316639,1.27785178708789), (0.975,1.21291651245989), (1.10961940777126,1.10961940777126), (1.21291651245989,0.975), (1.27785178708789,0.818232379316639)])
        ]

Order3 = [
        Polygon([(0.999999999999999,0), (0,1.73205080756888), (1.00,3.46410161513775), (3.00,3.46410161513775), (4,1.73205080756888), (3.00,0)]),
        Polygon([(0.544906896004020,2.22044604925031e-16), (0,1.67705098312484), (1.42658477444273,2.71352549156242), (2.85316954888546,1.67705098312484), (2.30826265288144,0)]),
        Polygon([(0,0), (1.73205080756888,3), (3.46410161513776,1.33226762955019e-15)]),
        Polygon([(2,2), (1.96592582628907,1.48236190979496), (1.86602540378444,1), (1.70710678118655,0.585786437626905), (1.50,0.267949192431123), (1.25881904510252,0.0681483474218634), (1,0), (0.741180954897479,0.0681483474218634), (0.500,0.267949192431123), (0.292893218813453,0.585786437626905), (0.133974596215561,1), (0.0340741737109317,1.48236190979496), (0,2), (0.0340741737109317,2.51763809020504), (0.133974596215561,3), (0.292893218813453,3.41421356237310), (0.500,3.73205080756888), (0.741180954897479,3.93185165257814), (1,4), (1.25881904510252,3.93185165257814), (1.50,3.73205080756888), (1.70710678118655,3.41421356237310), (1.86602540378444,3), (1.96592582628907,2.51763809020504)], holes=[[(1.75,2), (1.72444436971680,2.25881904510252), (1.64951905283833,2.50), (1.53033008588991,2.70710678118655), (1.37500000000000,2.86602540378444), (1.19411428382689,2.96592582628907), (1,3), (0.805885716173109,2.96592582628907), (0.625,2.86602540378444), (0.469669914110089,2.70710678118655), (0.350480947161671,2.50), (0.275555630283199,2.25881904510252), (0.250,2), (0.275555630283199,1.74118095489748), (0.350480947161671,1.50), (0.469669914110089,1.29289321881345), (0.625,1.13397459621556), (0.805885716173109,1.03407417371093), (1,1), (1.19411428382689,1.03407417371093), (1.37500000000000,1.13397459621556), (1.53033008588991,1.29289321881345), (1.64951905283833,1.50), (1.72444436971680,1.74118095489748)]]),
        Polygon([(0,0), (0,4), (4,4), (4,0)]),
        Polygon([(3,1.50), (2.94888873943360,1.11177143234622), (2.79903810567666,0.750), (2.56066017177982,0.439339828220179), (2.25,0.200961894323342), (1.88822856765378,0.0511112605663975), (1.50,0), (1.11177143234622,0.0511112605663975), (0.750,0.200961894323342), (0.439339828220179,0.439339828220179), (0.200961894323342,0.750), (0.0511112605663975,1.11177143234622), (0,1.50), (0.0511112605663975,1.88822856765378), (0.200961894323342,2.25), (0.439339828220179,2.56066017177982), (0.750,2.79903810567666), (1.11177143234622,2.94888873943360), (1.50,3), (1.88822856765378,2.94888873943360), (2.25,2.79903810567666), (2.56066017177982,2.56066017177982), (2.79903810567666,2.25), (2.94888873943360,1.88822856765378)]),
        Polygon([(0,0), (0,2), (2,2), (2,0)])
        ]

# %% Simple helper class for getting matplotlib patches from shapely polygons with different face colors
class PlotPatchHelper:
    # a colormap with 41 colors
    CMapColors = np.array([
        [0, 0.447, 0.741, 1],
        [0.85, 0.325, 0.098, 1],
        [0.929, 0.694, 0.125, 1],
        [0.494, 0.184, 0.556, 1],
        [0.466, 0.674, 0.188, 1],
        [0.301, 0.745, 0.933, 1],
        [0.635, 0.078, 0.184, 1],
        [0.333333333, 0.333333333, 0, 1],
        [0.333333333, 0.666666667, 0, 1],
        [0.666666667, 0.333333333, 0, 1],
        [0.666666667, 0.666666667, 0, 1],
        [1, 0.333333333, 0, 1],
        [1, 0.666666667, 0, 1],
        [0, 0.333333333, 0.5, 1],
        [0, 0.666666667, 0.5, 1],
        [0, 1, 0.5, 1],
        [0.333333333, 0, 0.5, 1],
        [0.333333333, 0.333333333, 0.5, 1],
        [0.333333333, 0.666666667, 0.5, 1],
        [0.333333333, 1, 0.5, 1],
        [0.666666667, 0, 0.5, 1],
        [0.666666667, 0.333333333, 0.5, 1],
        [0.666666667, 0.666666667, 0.5, 1],
        [1, 0, 0.5, 1],
        [1, 0.333333333, 0.5, 1],
        [1, 0.666666667, 0.5, 1],
        [1, 1, 0.5, 1],
        [0, 0.333333333, 1, 1],
        [0, 0.666666667, 1, 1],
        [0, 1, 1, 1],
        [0.333333333, 0, 1, 1],
        [0.333333333, 0.333333333, 1, 1],
        [0.333333333, 0.666666667, 1, 1],
        [0.333333333, 1, 1, 1],
        [0.666666667, 0, 1, 1],
        [0.666666667, 0.333333333, 1, 1],
        [0.666666667, 0.666666667, 1, 1],
        [0.666666667, 1, 1, 1],
        [1, 0, 1, 1],
        [1, 0.333333333, 1, 1],
        [1, 0.666666667, 1, 1]
    ])

    # Alpha controls the opaqueness, Gamma how darker the edge line will be and LineWidth its weight
    def __init__(self, Gamma=1.3, Alpha=0.9, LineWidth=2.0):
        self.count = 0
        self.Gamma = Gamma  # darker edge color if Gamma>1 -> faceColor ** Gamma; use np.inf for black
        self.Alpha = Alpha  # opaqueness level (1-transparency)
        self.LineWidth = LineWidth  # edge weight

    # circles through the colormap and returns the FaceColor and the EdgeColor (as FaceColor^Gamma)
    def nextcolor(self):
        col = self.CMapColors[self.count, :].copy()
        self.count = (self.count + 1) % self.CMapColors.shape[0]
        return (col, col ** self.Gamma)

    # returns a list of matplotlib.patches.PathPatch from the provided shapely polygons, using descartes; a list is
    # returned even for a single polygon for common handling
    def get_patches(self, poly):
        if not isinstance(poly, list):  # single polygon, make it a one element list for common handling
            poly = [poly]
        patchList = []
        for p in poly:
            fCol, eCol = self.nextcolor()
            patchList.append(PolygonPatch(p, alpha=self.Alpha, fc=fCol, ec=eCol,
                                          lw=self.LineWidth))
        return patchList


def plot_shapes(stock):
    fig, ax = plt.subplots()
    fig.canvas.manager.set_window_title('Shifted Order1 pieces for better viewing')
    shifted = stock.copy()
    for i in range(1, len(shifted)):
        xshift = shifted[i - 1].bounds[2] + 0.5  # previous Xmax of bounding box (bounds property) plus 0.5 space
        shifted[i] = shapely.affinity.translate(shifted[i], xshift)
    plotShapelyPoly(ax, shifted)
    ax.relim()
    ax.autoscale_view()
    ax.set_aspect('equal')
    # plt.show()


# Plots one or more shapely polygons in the provided axes ax. The named parameter values **kwargs are passed into
# PlotPatchHelper's constructor, e.g. you can write plotShapelyPoly(ax, poly, LineWidth=3, Alpha=1.0). Returns a list
# with the drawn patches objects even for a single polygon, for common handling
def plotShapelyPoly(ax, poly, **kwargs):
    return [ax.add_patch(p) for p in PlotPatchHelper(**kwargs).get_patches(poly)]


def main(Stock):
        idx = 0
        fig, ax = plt.subplots(ncols=8, nrows=2, figsize=(16, 9))

        fig.canvas.set_window_title('Stock x 2')
        for i in range(0, len(Stock)):
                if i >= 8:
                        idx = 1

                plotShapelyPoly(ax[idx][i % 8], Stock[i])
                ax[idx][i % 8].set_title('Stock[%d]' % i)
                (minx, miny, maxx, maxy) = Stock[i].bounds
                ax[idx][i % 8].set_ylim(bottom=miny, top=maxy)
                ax[idx][i % 8].set_xlim(left=minx, right=maxx)

        plt.show()
if __name__ == "__main__":
        main(Stock)